{"ast":null,"code":"import { UsuarioDto } from './Interfaces/dto/UsuarioDTO';\nimport { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(_http) {\n    this._http = _http;\n    this.logueado = false;\n    this.api_url = 'http://localhost:8080/api/v01/';\n  }\n\n  ngOnInit() {}\n\n  register(email, nombre, password) {\n    password = btoa(password);\n    return this._http.post(this.api_url + '/usuarios', {\n      email: email,\n      username: nombre,\n      pass: password\n    }).toPromise().then(res => {\n      this.postId = res;\n    });\n  }\n\n  login(nombre, password) {\n    password = btoa(password);\n    let usuario = new UsuarioDto(nombre, password);\n    return this._http.post(this.api_url + \"usuarios/login\", usuario).pipe(tap(userID => {\n      if (userID) {\n        sessionStorage.setItem('id', userID.toString());\n      }\n    }), map(userID => !!userID), tap(isLogged => this.logueado = isLogged)); // this.loginRest(nombre,password);\n    //  if(this.peticionid!=0&&this.peticionid!=undefined){\n    //    let peticionstring=String(this.peticionid);\n    //    sessionStorage.setItem('id',peticionstring);\n    //    return true;\n    //  }\n    //    return false;\n    // }\n    //   async loginRest(nombre:string, password:string){\n    //   password= btoa(password)\n    //   let usuario=new UsuarioDto(nombre,password);\n    //   await  this._http.post<number>(this.api_url+\"usuarios/login\",usuario).subscribe(respuesta=>{this.peticionid=respuesta\n    //   });\n  }\n\n  changePassword(password) {\n    let userLogged;\n    let idLogged = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\");\n\n    this._http.get(this.api_url + \"usuarios/\" + idLogged).subscribe(res => {\n      userLogged = res;\n      console.log(this.api_url + \"usuarios/\" + idLogged);\n      console.log(userLogged);\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\n        id: idLogged,\n        email: userLogged.email,\n        username: userLogged.username,\n        pass: password\n      }).toPromise().then(res => {\n        this.postId = res;\n      });\n    });\n  }\n\n  changeUsername(username) {\n    let userLogged;\n    let idLogged = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\");\n\n    this._http.get(this.api_url + \"usuarios/\" + idLogged).subscribe(res => {\n      userLogged = res;\n      console.log(this.api_url + \"usuarios/\" + idLogged);\n      console.log(userLogged);\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\n        id: idLogged,\n        email: userLogged.email,\n        username: username,\n        pass: userLogged.pass\n      }).toPromise().then(res => {\n        this.postId = res;\n      });\n    });\n  }\n\n  deleteUser(id) {\n    return this._http.delete(this.api_url + 'usuarios/' + id).toPromise().then(res => {\n      this.postId = res;\n    });\n    console.log(this.postId);\n  }\n\n  createAtribute(nombre, tipo, descripcion) {\n    return this._http.post(this.api_url + \"atributos/\", {\n      nombreAtributo: nombre,\n      tipoDato: tipo,\n      descripcion: descripcion\n    }).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  modifyAtribute(nombreActual, nuevoNombre) {\n    let atribute;\n\n    this._http.get(this.api_url + \"atributos/\" + nombreActual).subscribe(res => {\n      atribute = res;\n      return this._http.put(this.api_url + 'atributos/' + atribute.nombreAtributo, {\n        nombreAtributo: nuevoNombre,\n        tipoDato: atribute.tipoDato,\n        descripcion: \"joder\"\n      }).toPromise().then(res => {\n        this.postId = res;\n        console.log(this.postId);\n      });\n    });\n  }\n\n  deleteAtribute(nombre) {\n    return this._http.delete(this.api_url + 'atributos/' + nombre).toPromise().then(res => {\n      this.postId = res;\n    });\n    console.log(this.postId);\n  }\n\n  createProject(proyecto) {\n    return this._http.post(this.api_url + \"proyectos/completo\", proyecto).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  modifyProject(nuevoNombre, nuevoEquipo, id) {\n    return this._http.put(this.api_url + 'proyectos/' + id, {\n      nombre: nuevoNombre,\n      equipo: nuevoEquipo,\n      id: id\n    }).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  deleteProject(id) {\n    return this._http.delete(this.api_url + 'proyectos/borrarproyecto/' + id);\n  }\n\n  listAtributes() {\n    return this._http.get(this.api_url + \"atributos/\");\n  }\n\n  listProjects() {\n    return this._http.get(this.api_url + \"proyectos/\");\n  }\n\n  getProject(e) {\n    return this._http.get(this.api_url + 'proyectos/' + e);\n  }\n\n  getProjectAtribute(e) {\n    return this._http.get(this.api_url + 'relaciones/proyecto/' + e);\n  }\n\n  semanticSearch(s) {\n    return this._http.get(this.api_url + 'relaciones/busqueda/' + s);\n  }\n\n  busquedafiltrada(atributo) {\n    return this._http.post(this.api_url + '/atributos/busqueda/', atributo);\n  }\n\n  busquedafechas(fechas) {\n    return this._http.post(this.api_url + '/atributos/busqueda/fechas/', fechas);\n  }\n\n  getlogueo() {\n    return this.logueado;\n  }\n\n  sessionServerstorage() {\n    let resultado;\n\n    this._http.get(this.api_url + 'usuarios/session/' + sessionStorage.getItem(\"id\")).subscribe(peticion => resultado = peticion);\n\n    return resultado;\n  }\n\n  mantenerSession() {\n    if (this.sessionServerstorage()) {\n      this.logueado = true;\n    }\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\dani6\\Desktop\\ProyectoFinal\\Front\\src\\app\\api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { Usuario } from './Interfaces/Usuario';\r\nimport { Atributo } from './Interfaces/Atributo';\r\nimport { Observable } from 'rxjs';\r\nimport { Proyecto } from './Interfaces/Proyecto';\r\nimport { AtributoDTO } from './Interfaces/dto/AtributoDTO';\r\nimport { ProyectoAddDTO } from './Interfaces/dto/ProyectoAddDTO';\r\nimport { UsuarioDto } from './Interfaces/dto/UsuarioDTO';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { FechasDto } from './Interfaces/dto/FechasDTO';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService implements OnInit {\r\n  ngOnInit(): void { }\r\n\r\n  constructor(private _http: HttpClient) { }\r\n  logueado: boolean = false;\r\n\r\n\r\n  postId: any;\r\n  api_url: string = 'http://localhost:8080/api/v01/';\r\n  //  api_url:string='http://192.168.80.38:8080/api/v01/';\r\n  peticionid: number;\r\n\r\n\r\n\r\n\r\n\r\n  register(email: string, nombre: string, password: string) {\r\n    password = btoa(password);\r\n    return this._http.post(this.api_url + '/usuarios', {\r\n      email: email,\r\n      username: nombre,\r\n      pass: password\r\n    }).toPromise().then((res) => {\r\n      this.postId = res;\r\n    })\r\n  }\r\n\r\n  login(nombre: string, password: string): Observable<boolean> {\r\n    password = btoa(password)\r\n    let usuario = new UsuarioDto(nombre, password);\r\n    return this._http.post<number>(this.api_url + \"usuarios/login\", usuario)\r\n      .pipe(\r\n        tap((userID) => {\r\n          if (userID) {\r\n            sessionStorage.setItem('id', userID.toString());\r\n          }\r\n        }),\r\n        map((userID) => !!userID),\r\n        tap((isLogged) => this.logueado = isLogged));\r\n\r\n    // this.loginRest(nombre,password);\r\n\r\n\r\n    //  if(this.peticionid!=0&&this.peticionid!=undefined){\r\n\r\n    //    let peticionstring=String(this.peticionid);\r\n    //    sessionStorage.setItem('id',peticionstring);\r\n    //    return true;\r\n    //  }\r\n    //    return false;\r\n\r\n    // }\r\n    //   async loginRest(nombre:string, password:string){\r\n    //   password= btoa(password)\r\n    //   let usuario=new UsuarioDto(nombre,password);\r\n\r\n    //   await  this._http.post<number>(this.api_url+\"usuarios/login\",usuario).subscribe(respuesta=>{this.peticionid=respuesta\r\n\r\n    //   });\r\n\r\n\r\n  }\r\n\r\n\r\n  changePassword(password: string) {\r\n    let userLogged: Usuario\r\n    let idLogged: number = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\")\r\n\r\n    this._http.get<Usuario>(this.api_url + \"usuarios/\" + idLogged).subscribe((res: Usuario) => {\r\n      userLogged = res;\r\n      console.log(this.api_url + \"usuarios/\" + idLogged)\r\n      console.log(userLogged)\r\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\r\n        id: idLogged,\r\n        email: userLogged.email,\r\n        username: userLogged.username,\r\n        pass: password\r\n      }).toPromise().then((res) => {\r\n        this.postId = res;\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  changeUsername(username: string) {\r\n    let userLogged: Usuario\r\n    let idLogged: number = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\")\r\n\r\n    this._http.get<Usuario>(this.api_url + \"usuarios/\" + idLogged).subscribe((res: Usuario) => {\r\n      userLogged = res;\r\n      console.log(this.api_url + \"usuarios/\" + idLogged)\r\n      console.log(userLogged)\r\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\r\n        id: idLogged,\r\n        email: userLogged.email,\r\n        username: username,\r\n        pass: userLogged.pass\r\n      }).toPromise().then((res) => {\r\n        this.postId = res;\r\n      })\r\n    })\r\n  }\r\n\r\n  deleteUser(id: number) {\r\n    return this._http.delete(this.api_url + 'usuarios/' + id).toPromise().then((res) => {\r\n      this.postId = res;\r\n    })\r\n    console.log(this.postId)\r\n  }\r\n\r\n\r\n  createAtribute(nombre: string, tipo: string, descripcion: string) {\r\n    return this._http.post(this.api_url + \"atributos/\", {\r\n      nombreAtributo: nombre,\r\n      tipoDato: tipo,\r\n      descripcion: descripcion\r\n    }).toPromise().then((res) => {\r\n      this.postId = res;\r\n      console.log(this.postId)\r\n    })\r\n  }\r\n\r\n  modifyAtribute(nombreActual: string, nuevoNombre: string) {\r\n    let atribute: Atributo\r\n    this._http.get<Atributo>(this.api_url + \"atributos/\" + nombreActual).subscribe((res: Atributo) => {\r\n      atribute = res;\r\n      return this._http.put(this.api_url + 'atributos/' + atribute.nombreAtributo, {\r\n        nombreAtributo: nuevoNombre,\r\n        tipoDato: atribute.tipoDato,\r\n        descripcion: \"joder\"\r\n      }).toPromise().then((res) => {\r\n        this.postId = res;\r\n        console.log(this.postId)\r\n      })\r\n    })\r\n  }\r\n\r\n  deleteAtribute(nombre: string) {\r\n    return this._http.delete(this.api_url + 'atributos/' + nombre).toPromise().then((res) => {\r\n      this.postId = res;\r\n    })\r\n    console.log(this.postId)\r\n  }\r\n\r\n\r\n  createProject(proyecto: ProyectoAddDTO) {\r\n\r\n    return this._http.post(this.api_url + \"proyectos/completo\", proyecto).toPromise().then((res) => {\r\n      this.postId = res;\r\n      console.log(this.postId)\r\n    })\r\n\r\n  }\r\n\r\n  modifyProject(nuevoNombre: string, nuevoEquipo: string, id: number) {\r\n    return this._http.put(this.api_url + 'proyectos/' + id, {\r\n      nombre: nuevoNombre,\r\n      equipo: nuevoEquipo,\r\n      id: id\r\n    }).toPromise().then((res) => {\r\n      this.postId = res;\r\n      console.log(this.postId)\r\n    })\r\n  }\r\n\r\n  deleteProject(id: number):Observable<Proyecto> {\r\n    return this._http.delete<Proyecto>(this.api_url+ 'proyectos/borrarproyecto/'+ id);\r\n    \r\n  }\r\n\r\n  listAtributes(): Observable<Atributo[]> {\r\n    return this._http.get<Atributo[]>(this.api_url + \"atributos/\");\r\n  }\r\n  listProjects() {\r\n    return this._http.get<any>(this.api_url + \"proyectos/\");\r\n  }\r\n\r\n  getProject(e: number) {\r\n    return this._http.get<any>(this.api_url + 'proyectos/' + e);\r\n  }\r\n  getProjectAtribute(e: number) {\r\n    return this._http.get<any>(this.api_url + 'relaciones/proyecto/' + e);\r\n  }\r\n  semanticSearch(s: string) {\r\n    return this._http.get<any>(this.api_url + 'relaciones/busqueda/' + s);\r\n  }\r\n\r\n  busquedafiltrada(atributo: AtributoDTO): Observable<Proyecto[]> {\r\n    return this._http.post<Proyecto[]>(this.api_url + '/atributos/busqueda/', atributo);\r\n  }\r\n  busquedafechas(fechas: FechasDto): Observable<Proyecto[]> {\r\n    return this._http.post<Proyecto[]>(this.api_url + '/atributos/busqueda/fechas/', fechas);\r\n  }\r\n\r\n\r\n  getlogueo(): boolean { return this.logueado; }\r\n  sessionServerstorage(): boolean {\r\n    let resultado;\r\n    this._http.get<boolean>(this.api_url + 'usuarios/session/' + sessionStorage.getItem(\"id\")).subscribe(peticion => resultado = peticion);\r\n    return resultado;\r\n  }\r\n  mantenerSession(): void {\r\n    if (this.sessionServerstorage()) {\r\n       this.logueado = true;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
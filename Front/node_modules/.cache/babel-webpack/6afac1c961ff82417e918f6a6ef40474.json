{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dani6/Desktop/ProyectoFinal/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { UsuarioDto } from './Interfaces/dto/UsuarioDTO';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(_http) {\n    this._http = _http;\n    this.logueado = false;\n    this.api_url = 'http://localhost:8080/api/v01/';\n  }\n\n  ngOnInit() {}\n\n  register(email, nombre, password) {\n    password = btoa(password);\n    return this._http.post(this.api_url + '/usuarios', {\n      email: email,\n      username: nombre,\n      pass: password\n    }).toPromise().then(res => {\n      this.postId = res;\n    });\n  }\n\n  login(nombre, password) {\n    this.loginRest(nombre, password);\n\n    if (this.peticionid != 0 && this.peticionid != undefined) {\n      console.log(\"pasa\");\n      let peticionstring = String(this.peticionid);\n      sessionStorage.setItem('id', peticionstring);\n      return true;\n    }\n\n    return false;\n  }\n\n  loginRest(nombre, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      password = btoa(password);\n      let usuario = new UsuarioDto(nombre, password);\n      yield _this._http.post(_this.api_url + \"usuarios/login/\", usuario).subscribe(respuesta => _this.peticionid = respuesta);\n    })();\n  }\n\n  changePassword(password) {\n    let userLogged;\n    let idLogged = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\");\n\n    this._http.get(this.api_url + \"usuarios/\" + idLogged).subscribe(res => {\n      userLogged = res;\n      console.log(this.api_url + \"usuarios/\" + idLogged);\n      console.log(userLogged);\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\n        id: idLogged,\n        email: userLogged.email,\n        username: userLogged.username,\n        pass: password\n      }).toPromise().then(res => {\n        this.postId = res;\n      });\n    });\n  }\n\n  changeUsername(username) {\n    let userLogged;\n    let idLogged = parseInt(sessionStorage.getItem(\"isLogged\") || \"0\");\n\n    this._http.get(this.api_url + \"usuarios/\" + idLogged).subscribe(res => {\n      userLogged = res;\n      console.log(this.api_url + \"usuarios/\" + idLogged);\n      console.log(userLogged);\n      return this._http.put(this.api_url + 'usuarios/update/' + idLogged, {\n        id: idLogged,\n        email: userLogged.email,\n        username: username,\n        pass: userLogged.pass\n      }).toPromise().then(res => {\n        this.postId = res;\n      });\n    });\n  }\n\n  deleteUser(id) {\n    return this._http.delete(this.api_url + 'usuarios/' + id).toPromise().then(res => {\n      this.postId = res;\n    });\n    console.log(this.postId);\n  }\n\n  createAtribute(nombre, tipo, descripcion) {\n    return this._http.post(this.api_url + \"atributos/\", {\n      nombreAtributo: nombre,\n      tipoDato: tipo,\n      descripcion: descripcion\n    }).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  modifyAtribute(nombreActual, nuevoNombre) {\n    let atribute;\n\n    this._http.get(this.api_url + \"atributos/\" + nombreActual).subscribe(res => {\n      atribute = res;\n      return this._http.put(this.api_url + 'atributos/' + atribute.nombreAtributo, {\n        nombreAtributo: nuevoNombre,\n        tipoDato: atribute.tipoDato,\n        descripcion: \"joder\"\n      }).toPromise().then(res => {\n        this.postId = res;\n        console.log(this.postId);\n      });\n    });\n  }\n\n  deleteAtribute(nombre) {\n    return this._http.delete(this.api_url + 'atributos/' + nombre).toPromise().then(res => {\n      this.postId = res;\n    });\n    console.log(this.postId);\n  }\n\n  createProject(proyecto) {\n    return this._http.post(this.api_url + \"proyectos/completo\", proyecto).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  modifyProject(nombreActual, nuevoNombre, equipoActual, nuevoEquipo, id) {\n    return this._http.put(this.api_url + 'proyectos/' + id, {\n      nombre: nuevoNombre,\n      equipo: nuevoEquipo,\n      id: id\n    }).toPromise().then(res => {\n      this.postId = res;\n      console.log(this.postId);\n    });\n  }\n\n  deleteProject(nombre) {\n    return this._http.delete(this.api_url + 'proyectos/' + nombre).toPromise().then(res => {\n      this.postId = res;\n    });\n    console.log(this.postId);\n  }\n\n  listAtributes() {\n    return this._http.get(this.api_url + \"atributos/\");\n  }\n\n  listProjects() {\n    return this._http.get(this.api_url + \"proyectos/\");\n  }\n\n  getProject(e) {\n    return this._http.get(this.api_url + 'proyectos/' + e);\n  }\n\n  getProjectAtribute(e) {\n    return this._http.get(this.api_url + 'relaciones/proyecto/' + e);\n  }\n\n  semanticSearch(s) {\n    return this._http.get(this.api_url + 'relaciones/busqueda/' + s);\n  }\n\n  busquedafiltrada(atributo) {\n    return this._http.post(this.api_url + '/atributos/busqueda/', atributo);\n  }\n\n  getlogueo() {\n    return this.logueado;\n  }\n\n  sessionServerstorage() {\n    let resultado;\n\n    this._http.get(this.api_url + 'usuarios/session/' + sessionStorage.getItem(\"id\")).subscribe(peticion => resultado = peticion);\n\n    return resultado;\n  }\n\n  mantenerSession() {\n    if (this.sessionServerstorage()) {\n      this.logueado = true;\n    }\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\dani6\\Desktop\\ProyectoFinal\\Front\\src\\app\\api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { Usuario } from './Interfaces/Usuario';\r\nimport { Atributo } from './Interfaces/Atributo';\r\nimport { Observable } from 'rxjs';\r\nimport { Proyecto } from './Interfaces/Proyecto';\r\nimport { AtributoDTO } from './Interfaces/dto/AtributoDTO';\r\nimport { ProyectoAddDTO } from './Interfaces/dto/ProyectoAddDTO';\r\nimport { UsuarioDto } from './Interfaces/dto/UsuarioDTO';\r\n \r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService implements OnInit{\r\n  ngOnInit(): void { }\r\n\r\n  constructor(private _http: HttpClient){}  \r\n   logueado:boolean=false;\r\n\r\n   \r\n   postId:any;\r\n   api_url:string='http://localhost:8080/api/v01/';\r\n  //  api_url:string='http://192.168.80.38:8080/api/v01/';\r\n  peticionid:number;\r\n\r\n  \r\n\r\n\r\n\r\n  register(email:string, nombre:string, password:string){\r\n    password= btoa(password);\r\n    return this._http.post(this.api_url+'/usuarios',{\r\n      email:email,\r\n      username:nombre,\r\n      pass:password\r\n    }).toPromise().then((res)=> {\r\n      this.postId = res;\r\n  })\r\n  }\r\nlogin(nombre:string, password:string):boolean{\r\n\r\nthis.loginRest(nombre,password);\r\n\r\n\r\n if(this.peticionid!=0&&this.peticionid!=undefined){\r\n   console.log(\"pasa\")\r\n   let peticionstring=String(this.peticionid);\r\n   sessionStorage.setItem('id',peticionstring);\r\n   return true;\r\n }\r\n   return false;\r\n    \r\n}\r\n  async loginRest(nombre:string, password:string){\r\n  password= btoa(password)\r\n  let usuario=new UsuarioDto(nombre,password);\r\n \r\n  await  this._http.post<number>(this.api_url+\"usuarios/login/\",usuario).subscribe(respuesta=>this.peticionid=respuesta);\r\n  \r\n}\r\n\r\n\r\nchangePassword(password:string){\r\n  let userLogged:Usuario\r\n  let idLogged:number=parseInt(sessionStorage.getItem(\"isLogged\")||\"0\")\r\n  \r\n  this._http.get<Usuario>(this.api_url+\"usuarios/\"+idLogged).subscribe((res:Usuario)=> \r\n  {\r\n    userLogged = res;\r\n  console.log(this.api_url+\"usuarios/\"+idLogged)\r\n  console.log(userLogged)\r\n  return this._http.put(this.api_url+'usuarios/update/'+idLogged,{\r\n    id:idLogged,\r\n    email:userLogged.email,\r\n    username:userLogged.username,\r\n    pass:password\r\n  }).toPromise().then((res)=> {\r\n    this.postId = res;\r\n  })\r\n})\r\n}\r\n\r\n\r\n  changeUsername(username:string){\r\n    let userLogged:Usuario\r\n    let idLogged:number=parseInt(sessionStorage.getItem(\"isLogged\")||\"0\")\r\n    \r\n    this._http.get<Usuario>(this.api_url+\"usuarios/\"+idLogged).subscribe((res:Usuario)=> \r\n    {\r\n      userLogged = res;\r\n    console.log(this.api_url+\"usuarios/\"+idLogged)\r\n    console.log(userLogged)\r\n    return this._http.put(this.api_url+'usuarios/update/'+idLogged,{\r\n      id:idLogged,\r\n      email:userLogged.email,\r\n      username:username,\r\n      pass:userLogged.pass\r\n    }).toPromise().then((res)=> {\r\n      this.postId = res;\r\n    })\r\n  })\r\n  }\r\n\r\n  deleteUser(id:number){\r\n    return this._http.delete(this.api_url+'usuarios/'+id).toPromise().then((res)=> {\r\n      this.postId=res;\r\n    })\r\n    console.log(this.postId)\r\n  }\r\n\r\n\r\n  createAtribute(nombre:string,tipo:string,descripcion:string){\r\n    return this._http.post(this.api_url+\"atributos/\",{\r\n      nombreAtributo:nombre,\r\n      tipoDato:tipo,\r\n      descripcion:descripcion\r\n    }).toPromise().then((res)=>{\r\n      this.postId=res;\r\n      console.log(this.postId)\r\n    })\r\n  }\r\n\r\n  modifyAtribute(nombreActual:string,nuevoNombre:string){\r\n    let atribute:Atributo\r\n    this._http.get<Atributo>(this.api_url+\"atributos/\"+nombreActual).subscribe((res:Atributo)=> \r\n    {\r\n      atribute = res;\r\n    return this._http.put(this.api_url+'atributos/'+atribute.nombreAtributo,{\r\n      nombreAtributo:nuevoNombre,\r\n      tipoDato:atribute.tipoDato,\r\n      descripcion:\"joder\"\r\n    }).toPromise().then((res)=> {\r\n      this.postId = res;\r\n      console.log(this.postId)\r\n    })\r\n  })\r\n  }\r\n\r\n  deleteAtribute(nombre:string){\r\n    return this._http.delete(this.api_url+'atributos/'+nombre).toPromise().then((res)=> {\r\n      this.postId=res;\r\n    })\r\n    console.log(this.postId)\r\n  }\r\n\r\n\r\n  createProject(proyecto:ProyectoAddDTO){\r\n    \r\n    return this._http.post(this.api_url+\"proyectos/completo\",proyecto).toPromise().then((res)=>{\r\n      this.postId=res;\r\n      console.log(this.postId)\r\n    })\r\n\r\n  }\r\n\r\n  modifyProject(nombreActual:string,nuevoNombre:string, equipoActual:string, nuevoEquipo:string, id:number){\r\n    return this._http.put(this.api_url+'proyectos/'+id,{\r\n      nombre:nuevoNombre,\r\n      equipo:nuevoEquipo,\r\n      id:id\r\n    }).toPromise().then((res)=> {\r\n      this.postId = res;\r\n      console.log(this.postId)\r\n    })\r\n  }\r\n\r\n  deleteProject(nombre:string){\r\n    return this._http.delete(this.api_url+'proyectos/'+nombre).toPromise().then((res)=> {\r\n      this.postId=res;\r\n    })\r\n    console.log(this.postId)\r\n  }\r\n\r\n  listAtributes():Observable<Atributo[]>{\r\n    return this._http.get<Atributo[]>(this.api_url+\"atributos/\");\r\n  }\r\n  listProjects(){\r\n    return this._http.get<any>(this.api_url+\"proyectos/\");\r\n  }\r\n\r\n  getProject(e:number){\r\n    return this._http.get<any>(this.api_url+'proyectos/'+e);\r\n  }\r\n  getProjectAtribute(e:number){\r\n    return this._http.get<any>(this.api_url+'relaciones/proyecto/'+e);\r\n  }\r\n  semanticSearch(s:string){\r\n    return this._http.get<any>(this.api_url+'relaciones/busqueda/'+s);\r\n  }\r\n\r\n  busquedafiltrada(atributo:AtributoDTO):Observable<Proyecto[]>{\r\n    return this._http.post<Proyecto[]>(this.api_url+'/atributos/busqueda/',atributo);\r\n  }\r\n\r\n\r\n  getlogueo():boolean{return this.logueado;}\r\n  sessionServerstorage():boolean{\r\n    let resultado;\r\n    this._http.get<boolean>(this.api_url+'usuarios/session/'+sessionStorage.getItem(\"id\")).subscribe(peticion=>resultado=peticion);\r\n    return resultado;\r\n  }\r\n  mantenerSession():void{\r\n    if(this.sessionServerstorage()){\r\n      this.logueado=true;\r\n    }\r\n  }\r\n    \r\n    \r\n    \r\n\r\n \r\n}\r\n\r\n\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}